package com.arrow.lives.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.arrow.lives.model.Live;
import com.arrow.lives.service.LiveService;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/lives")
public class LiveController {

	@Autowired
	private LiveService liveService;

//	@GetMapping
//	public ResponseEntity<Page<Live>> getAllLives(
//			@PageableDefault(page = 0, size = 10, sort = "id", direction = Sort.Direction.ASC) Pageable pageable,
//			@RequestParam(required = false) String flag) {
//
//		Page<Live> livePage = liveService.findAll(pageable, flag);
//		if (livePage.isEmpty()) {
//			return new ResponseEntity<Page<Live>>(HttpStatus.NOT_FOUND);
//		} else {
//			return new ResponseEntity<Page<Live>>(livePage, HttpStatus.OK);
//		}
//
//	}

	@GetMapping("{id}")
	public ResponseEntity<Live> getOneLive(@PathVariable(value = "id") Long id) {
		Optional<Live> live = liveService.findById(id);
		if (live.isPresent()) {
			return new ResponseEntity<Live>(HttpStatus.OK);
		} else {
			return new ResponseEntity<Live>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{id}")
	public ResponseEntity<?> deleteLive(@PathVariable(value = "id") Long id) {
		Optional<Live> live = liveService.findById(id);
		if (live.isPresent()) {
			liveService.delete(live.get());
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@PutMapping("{id}")
	public ResponseEntity<Live> update(@PathVariable(value = "id") Long id, @RequestBody @Validated Live live) {
		Optional<Live> liveLoad = liveService.findById(id);
		if (liveLoad.isPresent()) {
			live.setId(liveLoad.get().getId());
			return new ResponseEntity<Live>(liveService.save(live), HttpStatus.OK);
		} else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}

	}

}
